package main

import (
	"reflect"
	"testing"
)

type testProgram struct {
	input program
	want  program
}

func TestAddition(t *testing.T) {
	tests := []testProgram{
		{
			input: program{code: []int{1, 0, 0, 0, 99}, cur: 0, input: 0, output: 0},
			want:  program{code: []int{2, 0, 0, 0, 99}, cur: 4, input: 0, output: 0},
		},
	}

	for _, tc := range tests {
		t.Run("Test addition opscode", func(t *testing.T) {
			tc.input.add()
			if reflect.DeepEqual(tc.input, tc.want) != true {
				t.Errorf("Got %+v, wanted %+v", tc.input, tc.want)
			}
		})
	}
}

func TestMultiplication(t *testing.T) {
	tests := []testProgram{
		{
			input: program{code: []int{2, 3, 0, 3, 99}, cur: 0, input: 0, output: 0},
			want:  program{code: []int{2, 3, 0, 6, 99}, cur: 0, input: 0, output: 0},
		},
	}

	for _, tc := range tests {
		t.Run("Test multiplication opscode", func(t *testing.T) {
			tc.input.multiply()
			if reflect.DeepEqual(tc.input.code, tc.want.code) != true {
				t.Errorf("Got %d, wanted %d", tc.input.code, tc.want.code)
			}
		})
	}
}

func TestInput(t *testing.T) {
	tests := []testProgram{
		{
			input: program{code: []int{3, 0, 99}, cur: 0, input: 1, output: 0},
			want:  program{code: []int{1, 0, 99}, cur: 2, input: 1, output: 0},
		},
	}

	for _, tc := range tests {
		t.Run("Test input write() opcode", func(t *testing.T) {
			tc.input.write()
			if reflect.DeepEqual(tc.input, tc.want) != true {
				t.Errorf("Got %+v, wanted %+v", tc.input, tc.want)
			}
		})
	}
}

func TestOutput(t *testing.T) {
	tests := []testProgram{
		{
			input: program{code: []int{4, 3, 99, 42}, cur: 0, input: 0, output: 0},
			want:  program{code: []int{4, 3, 99, 42}, cur: 2, input: 0, output: 42},
		},
	}

	for _, tc := range tests {
		t.Run("Test output read() opcode", func(t *testing.T) {
			tc.input.read()
			if reflect.DeepEqual(tc.input, tc.want) != true {
				t.Errorf("Got %+v, wanted %+v", tc.input, tc.want)
			}
		})
	}
}

func TestJumpIfTrue(t *testing.T) {
	tests := []testProgram{
		{
			input: program{code: []int{5, 4, 5, 99, 1, 6, 99}, cur: 0, input: 0, output: 0},
			want:  program{code: []int{5, 4, 5, 99, 1, 6, 99}, cur: 6, input: 0, output: 0},
		},
		{
			input: program{code: []int{5, 4, 5, 99, 0, 6, 99}, cur: 0, input: 0, output: 0},
			want:  program{code: []int{5, 4, 5, 99, 0, 6, 99}, cur: 3, input: 0, output: 0},
		},
	}

	for _, tc := range tests {
		t.Run("Test jumpIfTrue() opcode", func(t *testing.T) {
			tc.input.jumpIfTrue()
			if reflect.DeepEqual(tc.input, tc.want) != true {
				t.Errorf("Got %+v, wanted %+v", tc.input, tc.want)
			}
		})
	}
}

func TestJumpIfFalse(t *testing.T) {
	tests := []testProgram{
		{
			input: program{code: []int{5, 4, 5, 99, 1, 6, 99}, cur: 0, input: 0, output: 0},
			want:  program{code: []int{5, 4, 5, 99, 1, 6, 99}, cur: 3, input: 0, output: 0},
		},
		{
			input: program{code: []int{5, 4, 5, 99, 0, 6, 99}, cur: 0, input: 0, output: 0},
			want:  program{code: []int{5, 4, 5, 99, 0, 6, 99}, cur: 6, input: 0, output: 0},
		},
	}

	for _, tc := range tests {
		t.Run("Test output read() opcode", func(t *testing.T) {
			tc.input.jumpIfFalse()
			if reflect.DeepEqual(tc.input, tc.want) != true {
				t.Errorf("Got %+v, wanted %+v", tc.input, tc.want)
			}
		})
	}
}

func TestLessThan(t *testing.T) {
	tests := []testProgram{
		{
			input: program{code: []int{7, 5, 6, 7, 99, 1, 2, 0}, cur: 0, input: 0, output: 0},
			want:  program{code: []int{7, 5, 6, 7, 99, 1, 2, 1}, cur: 4, input: 0, output: 0},
		},
		{
			input: program{code: []int{7, 5, 6, 7, 99, 2, 1, 8}, cur: 0, input: 0, output: 0},
			want:  program{code: []int{7, 5, 6, 7, 99, 2, 1, 0}, cur: 4, input: 0, output: 0},
		},
	}

	for _, tc := range tests {
		t.Run("Test lessthan() opcode", func(t *testing.T) {
			tc.input.lessThan()
			if reflect.DeepEqual(tc.input, tc.want) != true {
				t.Errorf("Got %+v, wanted %+v", tc.input, tc.want)
			}
		})
	}
}

func TestProgram(t *testing.T) {
	tests := []testProgram{
		{
			input: program{code: []int{99}, cur: 0, input: 0, output: 0},
			want:  program{code: []int{99}, cur: 0, input: 0, output: 0},
		},
		{
			input: program{code: []int{1002, 4, 3, 4, 33}, cur: 0, input: 0, output: 0},
			want:  program{code: []int{1002, 4, 3, 4, 99}, cur: 4, input: 0, output: 0},
		},
		{
			input: program{code: []int{3, 0, 4, 0, 99}, cur: 0, input: 7, output: 0},
			want:  program{code: []int{7, 0, 4, 0, 99}, cur: 4, input: 7, output: 7},
		},
		{
			input: program{code: []int{3, 9, 8, 9, 10, 9, 4, 9, 99, -1, 8}, cur: 0, input: 0, output: 0},
			want:  program{code: []int{3, 9, 8, 9, 10, 9, 4, 9, 99, 0, 8}, cur: 8, input: 0, output: 0},
		},
		{
			input: program{code: []int{3, 9, 7, 9, 10, 9, 4, 9, 99, -1, 8}, cur: 0, input: 0, output: 0},
			want:  program{code: []int{3, 9, 7, 9, 10, 9, 4, 9, 99, 1, 8}, cur: 8, input: 0, output: 1},
		},
		{
			input: program{code: []int{3, 3, 1108, -1, 8, 3, 4, 3, 99}, cur: 0, input: 0, output: 0},
			want:  program{code: []int{3, 3, 1108, 0, 8, 3, 4, 3, 99}, cur: 8, input: 0, output: 0},
		},
		{
			input: program{code: []int{3, 3, 1107, -1, 8, 3, 4, 3, 99}, cur: 0, input: 0, output: 0},
			want:  program{code: []int{3, 3, 1107, 1, 8, 3, 4, 3, 99}, cur: 8, input: 0, output: 1},
		},
		{
			input: program{code: []int{3, 12, 6, 12, 15, 1, 13, 14, 13, 4, 13, 99, -1, 0, 1, 9}, cur: 0, input: 0, output: 0},
			want:  program{code: []int{3, 12, 6, 12, 15, 1, 13, 14, 13, 4, 13, 99, 0, 0, 1, 9}, cur: 11, input: 0, output: 0},
		},
		{
			input: program{code: []int{3, 3, 1105, -1, 9, 1101, 0, 0, 12, 4, 12, 99, 1}, cur: 0, input: 0, output: 0},
			want:  program{code: []int{3, 3, 1105, 0, 9, 1101, 0, 0, 12, 4, 12, 99, 0}, cur: 11, input: 0, output: 0},
		},
		{
			input: program{
				code:   []int{3, 21, 1008, 21, 8, 20, 1005, 20, 22, 107, 8, 21, 20, 1006, 20, 31, 1106, 0, 36, 98, 0, 0, 1002, 21, 125, 20, 4, 20, 1105, 1, 46, 104, 999, 1105, 1, 46, 1101, 1000, 1, 20, 4, 20, 1105, 1, 46, 98, 99},
				cur:    0,
				input:  0,
				output: 0,
			},
			want: program{
				code:   []int{3, 21, 1008, 21, 8, 20, 1005, 20, 22, 107, 8, 21, 20, 1006, 20, 31, 1106, 0, 36, 98, 0, 0, 1002, 21, 125, 20, 4, 20, 1105, 1, 46, 104, 999, 1105, 1, 46, 1101, 1000, 1, 20, 4, 20, 1105, 1, 46, 98, 99},
				cur:    46,
				input:  0,
				output: 999,
			},
		},

		{
			input: program{
				code:   []int{1002, 4, 3, 4, 33},
				cur:    0,
				input:  1,
				output: 0,
			},
			want: program{
				code:   []int{1002, 4, 3, 4, 99},
				cur:    4,
				input:  1,
				output: 0,
			},
		},
		// Day 5, part 1
		{
			input: program{
				code:   []int{3, 225, 1, 225, 6, 6, 1100, 1, 238, 225, 104, 0, 1102, 46, 47, 225, 2, 122, 130, 224, 101, -1998, 224, 224, 4, 224, 1002, 223, 8, 223, 1001, 224, 6, 224, 1, 224, 223, 223, 1102, 61, 51, 225, 102, 32, 92, 224, 101, -800, 224, 224, 4, 224, 1002, 223, 8, 223, 1001, 224, 1, 224, 1, 223, 224, 223, 1101, 61, 64, 225, 1001, 118, 25, 224, 101, -106, 224, 224, 4, 224, 1002, 223, 8, 223, 101, 1, 224, 224, 1, 224, 223, 223, 1102, 33, 25, 225, 1102, 73, 67, 224, 101, -4891, 224, 224, 4, 224, 1002, 223, 8, 223, 1001, 224, 4, 224, 1, 224, 223, 223, 1101, 14, 81, 225, 1102, 17, 74, 225, 1102, 52, 67, 225, 1101, 94, 27, 225, 101, 71, 39, 224, 101, -132, 224, 224, 4, 224, 1002, 223, 8, 223, 101, 5, 224, 224, 1, 224, 223, 223, 1002, 14, 38, 224, 101, -1786, 224, 224, 4, 224, 102, 8, 223, 223, 1001, 224, 2, 224, 1, 223, 224, 223, 1, 65, 126, 224, 1001, 224, -128, 224, 4, 224, 1002, 223, 8, 223, 101, 6, 224, 224, 1, 224, 223, 223, 1101, 81, 40, 224, 1001, 224, -121, 224, 4, 224, 102, 8, 223, 223, 101, 4, 224, 224, 1, 223, 224, 223, 4, 223, 99, 0, 0, 0, 677, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1105, 0, 99999, 1105, 227, 247, 1105, 1, 99999, 1005, 227, 99999, 1005, 0, 256, 1105, 1, 99999, 1106, 227, 99999, 1106, 0, 265, 1105, 1, 99999, 1006, 0, 99999, 1006, 227, 274, 1105, 1, 99999, 1105, 1, 280, 1105, 1, 99999, 1, 225, 225, 225, 1101, 294, 0, 0, 105, 1, 0, 1105, 1, 99999, 1106, 0, 300, 1105, 1, 99999, 1, 225, 225, 225, 1101, 314, 0, 0, 106, 0, 0, 1105, 1, 99999, 1008, 677, 226, 224, 1002, 223, 2, 223, 1005, 224, 329, 1001, 223, 1, 223, 107, 677, 677, 224, 102, 2, 223, 223, 1005, 224, 344, 101, 1, 223, 223, 1107, 677, 677, 224, 102, 2, 223, 223, 1005, 224, 359, 1001, 223, 1, 223, 1108, 226, 226, 224, 1002, 223, 2, 223, 1006, 224, 374, 101, 1, 223, 223, 107, 226, 226, 224, 1002, 223, 2, 223, 1005, 224, 389, 1001, 223, 1, 223, 108, 226, 226, 224, 1002, 223, 2, 223, 1005, 224, 404, 1001, 223, 1, 223, 1008, 677, 677, 224, 1002, 223, 2, 223, 1006, 224, 419, 1001, 223, 1, 223, 1107, 677, 226, 224, 102, 2, 223, 223, 1005, 224, 434, 1001, 223, 1, 223, 108, 226, 677, 224, 102, 2, 223, 223, 1006, 224, 449, 1001, 223, 1, 223, 8, 677, 226, 224, 102, 2, 223, 223, 1006, 224, 464, 1001, 223, 1, 223, 1007, 677, 226, 224, 1002, 223, 2, 223, 1006, 224, 479, 1001, 223, 1, 223, 1007, 677, 677, 224, 1002, 223, 2, 223, 1005, 224, 494, 1001, 223, 1, 223, 1107, 226, 677, 224, 1002, 223, 2, 223, 1006, 224, 509, 101, 1, 223, 223, 1108, 226, 677, 224, 102, 2, 223, 223, 1005, 224, 524, 1001, 223, 1, 223, 7, 226, 226, 224, 102, 2, 223, 223, 1005, 224, 539, 1001, 223, 1, 223, 8, 677, 677, 224, 1002, 223, 2, 223, 1005, 224, 554, 101, 1, 223, 223, 107, 677, 226, 224, 102, 2, 223, 223, 1006, 224, 569, 1001, 223, 1, 223, 7, 226, 677, 224, 1002, 223, 2, 223, 1005, 224, 584, 1001, 223, 1, 223, 1008, 226, 226, 224, 1002, 223, 2, 223, 1006, 224, 599, 101, 1, 223, 223, 1108, 677, 226, 224, 102, 2, 223, 223, 1006, 224, 614, 101, 1, 223, 223, 7, 677, 226, 224, 102, 2, 223, 223, 1005, 224, 629, 1001, 223, 1, 223, 8, 226, 677, 224, 1002, 223, 2, 223, 1006, 224, 644, 101, 1, 223, 223, 1007, 226, 226, 224, 102, 2, 223, 223, 1005, 224, 659, 101, 1, 223, 223, 108, 677, 677, 224, 1002, 223, 2, 223, 1006, 224, 674, 1001, 223, 1, 223, 4, 223, 99, 226},
				cur:    0,
				input:  1,
				output: 0,
			},
			want: program{
				code:   []int{3, 225, 1, 225, 6, 6, 1101, 1, 238, 225, 104, 0, 1102, 46, 47, 225, 2, 122, 130, 224, 101, -1998, 224, 224, 4, 224, 1002, 223, 8, 223, 1001, 224, 6, 224, 1, 224, 223, 223, 1102, 61, 51, 225, 102, 32, 92, 224, 101, -800, 224, 224, 4, 224, 1002, 223, 8, 223, 1001, 224, 1, 224, 1, 223, 224, 223, 1101, 61, 64, 225, 1001, 118, 25, 224, 101, -106, 224, 224, 4, 224, 1002, 223, 8, 223, 101, 1, 224, 224, 1, 224, 223, 223, 1102, 33, 25, 225, 1102, 73, 67, 224, 101, -4891, 224, 224, 4, 224, 1002, 223, 8, 223, 1001, 224, 4, 224, 1, 224, 223, 223, 1101, 14, 81, 225, 1102, 17, 74, 225, 1102, 52, 67, 225, 1101, 94, 27, 225, 101, 71, 39, 224, 101, -132, 224, 224, 4, 224, 1002, 223, 8, 223, 101, 5, 224, 224, 1, 224, 223, 223, 1002, 14, 38, 224, 101, -1786, 224, 224, 4, 224, 102, 8, 223, 223, 1001, 224, 2, 224, 1, 223, 224, 223, 1, 65, 126, 224, 1001, 224, -128, 224, 4, 224, 1002, 223, 8, 223, 101, 6, 224, 224, 1, 224, 223, 223, 1101, 81, 40, 224, 1001, 224, -121, 224, 4, 224, 102, 8, 223, 223, 101, 4, 224, 224, 1, 223, 224, 223, 4, 223, 99, 12896948, 4, 121, 677, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1105, 0, 99999, 1105, 227, 247, 1105, 1, 99999, 1005, 227, 99999, 1005, 0, 256, 1105, 1, 99999, 1106, 227, 99999, 1106, 0, 265, 1105, 1, 99999, 1006, 0, 99999, 1006, 227, 274, 1105, 1, 99999, 1105, 1, 280, 1105, 1, 99999, 1, 225, 225, 225, 1101, 294, 0, 0, 105, 1, 0, 1105, 1, 99999, 1106, 0, 300, 1105, 1, 99999, 1, 225, 225, 225, 1101, 314, 0, 0, 106, 0, 0, 1105, 1, 99999, 1008, 677, 226, 224, 1002, 223, 2, 223, 1005, 224, 329, 1001, 223, 1, 223, 107, 677, 677, 224, 102, 2, 223, 223, 1005, 224, 344, 101, 1, 223, 223, 1107, 677, 677, 224, 102, 2, 223, 223, 1005, 224, 359, 1001, 223, 1, 223, 1108, 226, 226, 224, 1002, 223, 2, 223, 1006, 224, 374, 101, 1, 223, 223, 107, 226, 226, 224, 1002, 223, 2, 223, 1005, 224, 389, 1001, 223, 1, 223, 108, 226, 226, 224, 1002, 223, 2, 223, 1005, 224, 404, 1001, 223, 1, 223, 1008, 677, 677, 224, 1002, 223, 2, 223, 1006, 224, 419, 1001, 223, 1, 223, 1107, 677, 226, 224, 102, 2, 223, 223, 1005, 224, 434, 1001, 223, 1, 223, 108, 226, 677, 224, 102, 2, 223, 223, 1006, 224, 449, 1001, 223, 1, 223, 8, 677, 226, 224, 102, 2, 223, 223, 1006, 224, 464, 1001, 223, 1, 223, 1007, 677, 226, 224, 1002, 223, 2, 223, 1006, 224, 479, 1001, 223, 1, 223, 1007, 677, 677, 224, 1002, 223, 2, 223, 1005, 224, 494, 1001, 223, 1, 223, 1107, 226, 677, 224, 1002, 223, 2, 223, 1006, 224, 509, 101, 1, 223, 223, 1108, 226, 677, 224, 102, 2, 223, 223, 1005, 224, 524, 1001, 223, 1, 223, 7, 226, 226, 224, 102, 2, 223, 223, 1005, 224, 539, 1001, 223, 1, 223, 8, 677, 677, 224, 1002, 223, 2, 223, 1005, 224, 554, 101, 1, 223, 223, 107, 677, 226, 224, 102, 2, 223, 223, 1006, 224, 569, 1001, 223, 1, 223, 7, 226, 677, 224, 1002, 223, 2, 223, 1005, 224, 584, 1001, 223, 1, 223, 1008, 226, 226, 224, 1002, 223, 2, 223, 1006, 224, 599, 101, 1, 223, 223, 1108, 677, 226, 224, 102, 2, 223, 223, 1006, 224, 614, 101, 1, 223, 223, 7, 677, 226, 224, 102, 2, 223, 223, 1005, 224, 629, 1001, 223, 1, 223, 8, 226, 677, 224, 1002, 223, 2, 223, 1006, 224, 644, 101, 1, 223, 223, 1007, 226, 226, 224, 102, 2, 223, 223, 1005, 224, 659, 101, 1, 223, 223, 108, 677, 677, 224, 1002, 223, 2, 223, 1006, 224, 674, 1001, 223, 1, 223, 4, 223, 99, 226},
				cur:    222,
				input:  1,
				output: 12896948,
			},
		},
		// Day 5, part 2
		{
			input: program{
				code:   []int{3, 225, 1, 225, 6, 6, 1100, 1, 238, 225, 104, 0, 1102, 46, 47, 225, 2, 122, 130, 224, 101, -1998, 224, 224, 4, 224, 1002, 223, 8, 223, 1001, 224, 6, 224, 1, 224, 223, 223, 1102, 61, 51, 225, 102, 32, 92, 224, 101, -800, 224, 224, 4, 224, 1002, 223, 8, 223, 1001, 224, 1, 224, 1, 223, 224, 223, 1101, 61, 64, 225, 1001, 118, 25, 224, 101, -106, 224, 224, 4, 224, 1002, 223, 8, 223, 101, 1, 224, 224, 1, 224, 223, 223, 1102, 33, 25, 225, 1102, 73, 67, 224, 101, -4891, 224, 224, 4, 224, 1002, 223, 8, 223, 1001, 224, 4, 224, 1, 224, 223, 223, 1101, 14, 81, 225, 1102, 17, 74, 225, 1102, 52, 67, 225, 1101, 94, 27, 225, 101, 71, 39, 224, 101, -132, 224, 224, 4, 224, 1002, 223, 8, 223, 101, 5, 224, 224, 1, 224, 223, 223, 1002, 14, 38, 224, 101, -1786, 224, 224, 4, 224, 102, 8, 223, 223, 1001, 224, 2, 224, 1, 223, 224, 223, 1, 65, 126, 224, 1001, 224, -128, 224, 4, 224, 1002, 223, 8, 223, 101, 6, 224, 224, 1, 224, 223, 223, 1101, 81, 40, 224, 1001, 224, -121, 224, 4, 224, 102, 8, 223, 223, 101, 4, 224, 224, 1, 223, 224, 223, 4, 223, 99, 0, 0, 0, 677, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1105, 0, 99999, 1105, 227, 247, 1105, 1, 99999, 1005, 227, 99999, 1005, 0, 256, 1105, 1, 99999, 1106, 227, 99999, 1106, 0, 265, 1105, 1, 99999, 1006, 0, 99999, 1006, 227, 274, 1105, 1, 99999, 1105, 1, 280, 1105, 1, 99999, 1, 225, 225, 225, 1101, 294, 0, 0, 105, 1, 0, 1105, 1, 99999, 1106, 0, 300, 1105, 1, 99999, 1, 225, 225, 225, 1101, 314, 0, 0, 106, 0, 0, 1105, 1, 99999, 1008, 677, 226, 224, 1002, 223, 2, 223, 1005, 224, 329, 1001, 223, 1, 223, 107, 677, 677, 224, 102, 2, 223, 223, 1005, 224, 344, 101, 1, 223, 223, 1107, 677, 677, 224, 102, 2, 223, 223, 1005, 224, 359, 1001, 223, 1, 223, 1108, 226, 226, 224, 1002, 223, 2, 223, 1006, 224, 374, 101, 1, 223, 223, 107, 226, 226, 224, 1002, 223, 2, 223, 1005, 224, 389, 1001, 223, 1, 223, 108, 226, 226, 224, 1002, 223, 2, 223, 1005, 224, 404, 1001, 223, 1, 223, 1008, 677, 677, 224, 1002, 223, 2, 223, 1006, 224, 419, 1001, 223, 1, 223, 1107, 677, 226, 224, 102, 2, 223, 223, 1005, 224, 434, 1001, 223, 1, 223, 108, 226, 677, 224, 102, 2, 223, 223, 1006, 224, 449, 1001, 223, 1, 223, 8, 677, 226, 224, 102, 2, 223, 223, 1006, 224, 464, 1001, 223, 1, 223, 1007, 677, 226, 224, 1002, 223, 2, 223, 1006, 224, 479, 1001, 223, 1, 223, 1007, 677, 677, 224, 1002, 223, 2, 223, 1005, 224, 494, 1001, 223, 1, 223, 1107, 226, 677, 224, 1002, 223, 2, 223, 1006, 224, 509, 101, 1, 223, 223, 1108, 226, 677, 224, 102, 2, 223, 223, 1005, 224, 524, 1001, 223, 1, 223, 7, 226, 226, 224, 102, 2, 223, 223, 1005, 224, 539, 1001, 223, 1, 223, 8, 677, 677, 224, 1002, 223, 2, 223, 1005, 224, 554, 101, 1, 223, 223, 107, 677, 226, 224, 102, 2, 223, 223, 1006, 224, 569, 1001, 223, 1, 223, 7, 226, 677, 224, 1002, 223, 2, 223, 1005, 224, 584, 1001, 223, 1, 223, 1008, 226, 226, 224, 1002, 223, 2, 223, 1006, 224, 599, 101, 1, 223, 223, 1108, 677, 226, 224, 102, 2, 223, 223, 1006, 224, 614, 101, 1, 223, 223, 7, 677, 226, 224, 102, 2, 223, 223, 1005, 224, 629, 1001, 223, 1, 223, 8, 226, 677, 224, 1002, 223, 2, 223, 1006, 224, 644, 101, 1, 223, 223, 1007, 226, 226, 224, 102, 2, 223, 223, 1005, 224, 659, 101, 1, 223, 223, 108, 677, 677, 224, 1002, 223, 2, 223, 1006, 224, 674, 1001, 223, 1, 223, 4, 223, 99, 226},
				cur:    0,
				input:  5,
				output: 0,
			},
			want: program{
				code:   []int{314, 225, 1, 225, 6, 6, 1105, 1, 238, 225, 104, 0, 1102, 46, 47, 225, 2, 122, 130, 224, 101, -1998, 224, 224, 4, 224, 1002, 223, 8, 223, 1001, 224, 6, 224, 1, 224, 223, 223, 1102, 61, 51, 225, 102, 32, 92, 224, 101, -800, 224, 224, 4, 224, 1002, 223, 8, 223, 1001, 224, 1, 224, 1, 223, 224, 223, 1101, 61, 64, 225, 1001, 118, 25, 224, 101, -106, 224, 224, 4, 224, 1002, 223, 8, 223, 101, 1, 224, 224, 1, 224, 223, 223, 1102, 33, 25, 225, 1102, 73, 67, 224, 101, -4891, 224, 224, 4, 224, 1002, 223, 8, 223, 1001, 224, 4, 224, 1, 224, 223, 223, 1101, 14, 81, 225, 1102, 17, 74, 225, 1102, 52, 67, 225, 1101, 94, 27, 225, 101, 71, 39, 224, 101, -132, 224, 224, 4, 224, 1002, 223, 8, 223, 101, 5, 224, 224, 1, 224, 223, 223, 1002, 14, 38, 224, 101, -1786, 224, 224, 4, 224, 102, 8, 223, 223, 1001, 224, 2, 224, 1, 223, 224, 223, 1, 65, 126, 224, 1001, 224, -128, 224, 4, 224, 1002, 223, 8, 223, 101, 6, 224, 224, 1, 224, 223, 223, 1101, 81, 40, 224, 1001, 224, -121, 224, 4, 224, 102, 8, 223, 223, 101, 4, 224, 224, 1, 223, 224, 223, 4, 223, 99, 7704130, 0, 20, 677, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1105, 0, 99999, 1105, 227, 247, 1105, 1, 99999, 1005, 227, 99999, 1005, 0, 256, 1105, 1, 99999, 1106, 227, 99999, 1106, 0, 265, 1105, 1, 99999, 1006, 0, 99999, 1006, 227, 274, 1105, 1, 99999, 1105, 1, 280, 1105, 1, 99999, 1, 225, 225, 225, 1101, 294, 0, 0, 105, 1, 0, 1105, 1, 99999, 1106, 0, 300, 1105, 1, 99999, 1, 225, 225, 225, 1101, 314, 0, 0, 106, 0, 0, 1105, 1, 99999, 1008, 677, 226, 224, 1002, 223, 2, 223, 1005, 224, 329, 1001, 223, 1, 223, 107, 677, 677, 224, 102, 2, 223, 223, 1005, 224, 344, 101, 1, 223, 223, 1107, 677, 677, 224, 102, 2, 223, 223, 1005, 224, 359, 1001, 223, 1, 223, 1108, 226, 226, 224, 1002, 223, 2, 223, 1006, 224, 374, 101, 1, 223, 223, 107, 226, 226, 224, 1002, 223, 2, 223, 1005, 224, 389, 1001, 223, 1, 223, 108, 226, 226, 224, 1002, 223, 2, 223, 1005, 224, 404, 1001, 223, 1, 223, 1008, 677, 677, 224, 1002, 223, 2, 223, 1006, 224, 419, 1001, 223, 1, 223, 1107, 677, 226, 224, 102, 2, 223, 223, 1005, 224, 434, 1001, 223, 1, 223, 108, 226, 677, 224, 102, 2, 223, 223, 1006, 224, 449, 1001, 223, 1, 223, 8, 677, 226, 224, 102, 2, 223, 223, 1006, 224, 464, 1001, 223, 1, 223, 1007, 677, 226, 224, 1002, 223, 2, 223, 1006, 224, 479, 1001, 223, 1, 223, 1007, 677, 677, 224, 1002, 223, 2, 223, 1005, 224, 494, 1001, 223, 1, 223, 1107, 226, 677, 224, 1002, 223, 2, 223, 1006, 224, 509, 101, 1, 223, 223, 1108, 226, 677, 224, 102, 2, 223, 223, 1005, 224, 524, 1001, 223, 1, 223, 7, 226, 226, 224, 102, 2, 223, 223, 1005, 224, 539, 1001, 223, 1, 223, 8, 677, 677, 224, 1002, 223, 2, 223, 1005, 224, 554, 101, 1, 223, 223, 107, 677, 226, 224, 102, 2, 223, 223, 1006, 224, 569, 1001, 223, 1, 223, 7, 226, 677, 224, 1002, 223, 2, 223, 1005, 224, 584, 1001, 223, 1, 223, 1008, 226, 226, 224, 1002, 223, 2, 223, 1006, 224, 599, 101, 1, 223, 223, 1108, 677, 226, 224, 102, 2, 223, 223, 1006, 224, 614, 101, 1, 223, 223, 7, 677, 226, 224, 102, 2, 223, 223, 1005, 224, 629, 1001, 223, 1, 223, 8, 226, 677, 224, 1002, 223, 2, 223, 1006, 224, 644, 101, 1, 223, 223, 1007, 226, 226, 224, 102, 2, 223, 223, 1005, 224, 659, 101, 1, 223, 223, 108, 677, 677, 224, 1002, 223, 2, 223, 1006, 224, 674, 1001, 223, 1, 223, 4, 223, 99, 226},
				cur:    676,
				input:  5,
				output: 7704130,
			},
		},
	}

	for _, tc := range tests {
		t.Run("Test full program", func(t *testing.T) {
			tc.input.runProgram()
			if reflect.DeepEqual(tc.input, tc.want) != true {
				t.Errorf("Got %+v, wanted %+v", tc.input, tc.want)
			}
		})
	}
}
